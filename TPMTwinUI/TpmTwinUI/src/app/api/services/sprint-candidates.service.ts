/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiSprintCandidatesDetailsGet$Json } from '../fn/sprint-candidates/api-sprint-candidates-details-get-json';
import { ApiSprintCandidatesDetailsGet$Json$Params } from '../fn/sprint-candidates/api-sprint-candidates-details-get-json';
import { apiSprintCandidatesDetailsGet$Plain } from '../fn/sprint-candidates/api-sprint-candidates-details-get-plain';
import { ApiSprintCandidatesDetailsGet$Plain$Params } from '../fn/sprint-candidates/api-sprint-candidates-details-get-plain';
import { apiSprintCandidatesPost$Json } from '../fn/sprint-candidates/api-sprint-candidates-post-json';
import { ApiSprintCandidatesPost$Json$Params } from '../fn/sprint-candidates/api-sprint-candidates-post-json';
import { apiSprintCandidatesPost$Plain } from '../fn/sprint-candidates/api-sprint-candidates-post-plain';
import { ApiSprintCandidatesPost$Plain$Params } from '../fn/sprint-candidates/api-sprint-candidates-post-plain';
import { apiSprintCandidatesSearchGet$Json } from '../fn/sprint-candidates/api-sprint-candidates-search-get-json';
import { ApiSprintCandidatesSearchGet$Json$Params } from '../fn/sprint-candidates/api-sprint-candidates-search-get-json';
import { apiSprintCandidatesSearchGet$Plain } from '../fn/sprint-candidates/api-sprint-candidates-search-get-plain';
import { ApiSprintCandidatesSearchGet$Plain$Params } from '../fn/sprint-candidates/api-sprint-candidates-search-get-plain';
import { apiSprintCandidatesSummaryGet$Json } from '../fn/sprint-candidates/api-sprint-candidates-summary-get-json';
import { ApiSprintCandidatesSummaryGet$Json$Params } from '../fn/sprint-candidates/api-sprint-candidates-summary-get-json';
import { apiSprintCandidatesSummaryGet$Plain } from '../fn/sprint-candidates/api-sprint-candidates-summary-get-plain';
import { ApiSprintCandidatesSummaryGet$Plain$Params } from '../fn/sprint-candidates/api-sprint-candidates-summary-get-plain';
import { SprintCandidates } from '../models/sprint-candidates';
import { SprintCandidateSummaryDto } from '../models/sprint-candidate-summary-dto';

@Injectable({ providedIn: 'root' })
export class SprintCandidatesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiSprintCandidatesSummaryGet()` */
  static readonly ApiSprintCandidatesSummaryGetPath = '/api/SprintCandidates/summary';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesSummaryGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSummaryGet$Plain$Response(params?: ApiSprintCandidatesSummaryGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SprintCandidateSummaryDto>>> {
    return apiSprintCandidatesSummaryGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesSummaryGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSummaryGet$Plain(params?: ApiSprintCandidatesSummaryGet$Plain$Params, context?: HttpContext): Observable<Array<SprintCandidateSummaryDto>> {
    return this.apiSprintCandidatesSummaryGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SprintCandidateSummaryDto>>): Array<SprintCandidateSummaryDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesSummaryGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSummaryGet$Json$Response(params?: ApiSprintCandidatesSummaryGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SprintCandidateSummaryDto>>> {
    return apiSprintCandidatesSummaryGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesSummaryGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSummaryGet$Json(params?: ApiSprintCandidatesSummaryGet$Json$Params, context?: HttpContext): Observable<Array<SprintCandidateSummaryDto>> {
    return this.apiSprintCandidatesSummaryGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SprintCandidateSummaryDto>>): Array<SprintCandidateSummaryDto> => r.body)
    );
  }

  /** Path part for operation `apiSprintCandidatesDetailsGet()` */
  static readonly ApiSprintCandidatesDetailsGetPath = '/api/SprintCandidates/details';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesDetailsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesDetailsGet$Plain$Response(params?: ApiSprintCandidatesDetailsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<any>>> {
    return apiSprintCandidatesDetailsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesDetailsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesDetailsGet$Plain(params?: ApiSprintCandidatesDetailsGet$Plain$Params, context?: HttpContext): Observable<Array<any>> {
    return this.apiSprintCandidatesDetailsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<any>>): Array<any> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesDetailsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesDetailsGet$Json$Response(params?: ApiSprintCandidatesDetailsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<any>>> {
    return apiSprintCandidatesDetailsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesDetailsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesDetailsGet$Json(params?: ApiSprintCandidatesDetailsGet$Json$Params, context?: HttpContext): Observable<Array<any>> {
    return this.apiSprintCandidatesDetailsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<any>>): Array<any> => r.body)
    );
  }

  /** Path part for operation `apiSprintCandidatesPost()` */
  static readonly ApiSprintCandidatesPostPath = '/api/SprintCandidates';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiSprintCandidatesPost$Plain$Response(params?: ApiSprintCandidatesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<SprintCandidates>> {
    return apiSprintCandidatesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiSprintCandidatesPost$Plain(params?: ApiSprintCandidatesPost$Plain$Params, context?: HttpContext): Observable<SprintCandidates> {
    return this.apiSprintCandidatesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<SprintCandidates>): SprintCandidates => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiSprintCandidatesPost$Json$Response(params?: ApiSprintCandidatesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<SprintCandidates>> {
    return apiSprintCandidatesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiSprintCandidatesPost$Json(params?: ApiSprintCandidatesPost$Json$Params, context?: HttpContext): Observable<SprintCandidates> {
    return this.apiSprintCandidatesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<SprintCandidates>): SprintCandidates => r.body)
    );
  }

  /** Path part for operation `apiSprintCandidatesSearchGet()` */
  static readonly ApiSprintCandidatesSearchGetPath = '/api/SprintCandidates/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesSearchGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSearchGet$Plain$Response(params?: ApiSprintCandidatesSearchGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SprintCandidates>>> {
    return apiSprintCandidatesSearchGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesSearchGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSearchGet$Plain(params?: ApiSprintCandidatesSearchGet$Plain$Params, context?: HttpContext): Observable<Array<SprintCandidates>> {
    return this.apiSprintCandidatesSearchGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SprintCandidates>>): Array<SprintCandidates> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiSprintCandidatesSearchGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSearchGet$Json$Response(params?: ApiSprintCandidatesSearchGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SprintCandidates>>> {
    return apiSprintCandidatesSearchGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiSprintCandidatesSearchGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiSprintCandidatesSearchGet$Json(params?: ApiSprintCandidatesSearchGet$Json$Params, context?: HttpContext): Observable<Array<SprintCandidates>> {
    return this.apiSprintCandidatesSearchGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SprintCandidates>>): Array<SprintCandidates> => r.body)
    );
  }

}
